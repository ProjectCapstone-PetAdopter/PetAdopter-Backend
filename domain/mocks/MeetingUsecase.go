// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "petadopter/domain"

	mock "github.com/stretchr/testify/mock"
)

// MeetingUsecase is an autogenerated mock type for the MeetingUsecase type
type MeetingUsecase struct {
	mock.Mock
}

// AddMeeting provides a mock function with given fields: data
func (_m *MeetingUsecase) AddMeeting(data domain.Meeting) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Meeting) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Meeting) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMeeting provides a mock function with given fields: id
func (_m *MeetingUsecase) DeleteMeeting(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEmail provides a mock function with given fields: userID, meetingID
func (_m *MeetingUsecase) GetEmail(userID int, meetingID int) (domain.Ownerdata, domain.Seekerdata) {
	ret := _m.Called(userID, meetingID)

	var r0 domain.Ownerdata
	if rf, ok := ret.Get(0).(func(int, int) domain.Ownerdata); ok {
		r0 = rf(userID, meetingID)
	} else {
		r0 = ret.Get(0).(domain.Ownerdata)
	}

	var r1 domain.Seekerdata
	if rf, ok := ret.Get(1).(func(int, int) domain.Seekerdata); ok {
		r1 = rf(userID, meetingID)
	} else {
		r1 = ret.Get(1).(domain.Seekerdata)
	}

	return r0, r1
}

// GetOwnerMeeting provides a mock function with given fields: userID
func (_m *MeetingUsecase) GetOwnerMeeting(userID int) ([]map[string]interface{}, error) {
	ret := _m.Called(userID)

	var r0 []map[string]interface{}
	if rf, ok := ret.Get(0).(func(int) []map[string]interface{}); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPetMeeting provides a mock function with given fields: id
func (_m *MeetingUsecase) GetPetMeeting(id int) (domain.Meeting, error) {
	ret := _m.Called(id)

	var r0 domain.Meeting
	if rf, ok := ret.Get(0).(func(int) domain.Meeting); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Meeting)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSeekMeeting provides a mock function with given fields: userID
func (_m *MeetingUsecase) GetSeekMeeting(userID int) ([]map[string]interface{}, error) {
	ret := _m.Called(userID)

	var r0 []map[string]interface{}
	if rf, ok := ret.Get(0).(func(int) []map[string]interface{}); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMeeting provides a mock function with given fields: UpdateMeeting, id
func (_m *MeetingUsecase) UpdateMeeting(UpdateMeeting domain.Meeting, id int) (int, error) {
	ret := _m.Called(UpdateMeeting, id)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Meeting, int) int); ok {
		r0 = rf(UpdateMeeting, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Meeting, int) error); ok {
		r1 = rf(UpdateMeeting, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMeetingUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMeetingUsecase creates a new instance of MeetingUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMeetingUsecase(t mockConstructorTestingTNewMeetingUsecase) *MeetingUsecase {
	mock := &MeetingUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
