// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "petadopter/domain"

	mock "github.com/stretchr/testify/mock"
)

// PetsUseCase is an autogenerated mock type for the PetsUseCase type
type PetsUseCase struct {
	mock.Mock
}

// AddPets provides a mock function with given fields: newPets
func (_m *PetsUseCase) AddPets(newPets domain.Pets) (domain.Pets, error) {
	ret := _m.Called(newPets)

	var r0 domain.Pets
	if rf, ok := ret.Get(0).(func(domain.Pets) domain.Pets); ok {
		r0 = rf(newPets)
	} else {
		r0 = ret.Get(0).(domain.Pets)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Pets) error); ok {
		r1 = rf(newPets)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DelPets provides a mock function with given fields: IDPets
func (_m *PetsUseCase) DelPets(IDPets int) (bool, error) {
	ret := _m.Called(IDPets)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(IDPets)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(IDPets)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllP provides a mock function with given fields:
func (_m *PetsUseCase) GetAllP() ([]domain.Pets, error) {
	ret := _m.Called()

	var r0 []domain.Pets
	if rf, ok := ret.Get(0).(func() []domain.Pets); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Pets)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpecificPets provides a mock function with given fields: PetsID
func (_m *PetsUseCase) GetSpecificPets(PetsID int) ([]domain.Pets, domain.PetUser, error) {
	ret := _m.Called(PetsID)

	var r0 []domain.Pets
	if rf, ok := ret.Get(0).(func(int) []domain.Pets); ok {
		r0 = rf(PetsID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Pets)
		}
	}

	var r1 domain.PetUser
	if rf, ok := ret.Get(1).(func(int) domain.PetUser); ok {
		r1 = rf(PetsID)
	} else {
		r1 = ret.Get(1).(domain.PetUser)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(PetsID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetmyPets provides a mock function with given fields: userID
func (_m *PetsUseCase) GetmyPets(userID int) ([]domain.Pets, error) {
	ret := _m.Called(userID)

	var r0 []domain.Pets
	if rf, ok := ret.Get(0).(func(int) []domain.Pets); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Pets)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpPets provides a mock function with given fields: IDPets, updateData
func (_m *PetsUseCase) UpPets(IDPets int, updateData domain.Pets) (domain.Pets, error) {
	ret := _m.Called(IDPets, updateData)

	var r0 domain.Pets
	if rf, ok := ret.Get(0).(func(int, domain.Pets) domain.Pets); ok {
		r0 = rf(IDPets, updateData)
	} else {
		r0 = ret.Get(0).(domain.Pets)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.Pets) error); ok {
		r1 = rf(IDPets, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPetsUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewPetsUseCase creates a new instance of PetsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPetsUseCase(t mockConstructorTestingTNewPetsUseCase) *PetsUseCase {
	mock := &PetsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
