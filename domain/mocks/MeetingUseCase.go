// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "petadopter/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockMeetingUseCase is an autogenerated mock type for the MeetingUsecase type
type MockMeetingUseCase struct {
	mock.Mock
}

// AddMeeting provides a mock function with given fields: data
func (_m *MockMeetingUseCase) AddMeeting(data domain.Meeting) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Meeting) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Meeting) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMeeting provides a mock function with given fields: id
func (_m *MockMeetingUseCase) DeleteMeeting(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMyMeeting provides a mock function with given fields: meetingID
func (_m *MockMeetingUseCase) GetMyMeeting(meetingID int) ([]domain.MeetingOwner, error) {
	ret := _m.Called(meetingID)

	var r0 []domain.MeetingOwner
	if rf, ok := ret.Get(0).(func(int) []domain.MeetingOwner); ok {
		r0 = rf(meetingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MeetingOwner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(meetingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMeeting provides a mock function with given fields: UpdateMeeting, id
func (_m *MockMeetingUseCase) UpdateMeeting(UpdateMeeting domain.Meeting, id int) error {
	ret := _m.Called(UpdateMeeting, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Meeting, int) error); ok {
		r0 = rf(UpdateMeeting, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockMeetingUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMeetingUseCase creates a new instance of MockMeetingUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMeetingUseCase(t mockConstructorTestingTNewMockMeetingUseCase) *MockMeetingUseCase {
	mock := &MockMeetingUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
