// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "petadopter/domain"

	mock "github.com/stretchr/testify/mock"
	oauth2 "golang.org/x/oauth2"
)

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: userID
func (_m *UserUseCase) Delete(userID int) (bool, error) {
	ret := _m.Called(userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields: id
func (_m *UserUseCase) GetProfile(id int) (domain.User, error) {
	ret := _m.Called(id)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(int) domain.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: userdata
func (_m *UserUseCase) Login(userdata domain.User) (domain.User, error) {
	ret := _m.Called(userdata)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(domain.User) domain.User); ok {
		r0 = rf(userdata)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(userdata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: newuser, cost, token
func (_m *UserUseCase) RegisterUser(newuser domain.User, cost int, token *oauth2.Token) int {
	ret := _m.Called(newuser, cost, token)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.User, int, *oauth2.Token) int); ok {
		r0 = rf(newuser, cost, token)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: newuser, userid, cost
func (_m *UserUseCase) UpdateUser(newuser domain.User, userid int, cost int) int {
	ret := _m.Called(newuser, userid, cost)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.User, int, int) int); ok {
		r0 = rf(newuser, userid, cost)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type mockConstructorTestingTNewUserUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUseCase creates a new instance of UserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUseCase(t mockConstructorTestingTNewUserUseCase) *UserUseCase {
	mock := &UserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
