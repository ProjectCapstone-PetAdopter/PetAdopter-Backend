// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "petadopter/domain"

	mock "github.com/stretchr/testify/mock"
)

// MeetingData is an autogenerated mock type for the MeetingData type
type MeetingData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *MeetingData) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEmailData provides a mock function with given fields: userID, meetingID
func (_m *MeetingData) GetEmailData(userID int, meetingID int) (domain.Ownerdata, domain.Seekerdata, int) {
	ret := _m.Called(userID, meetingID)

	var r0 domain.Ownerdata
	if rf, ok := ret.Get(0).(func(int, int) domain.Ownerdata); ok {
		r0 = rf(userID, meetingID)
	} else {
		r0 = ret.Get(0).(domain.Ownerdata)
	}

	var r1 domain.Seekerdata
	if rf, ok := ret.Get(1).(func(int, int) domain.Seekerdata); ok {
		r1 = rf(userID, meetingID)
	} else {
		r1 = ret.Get(1).(domain.Seekerdata)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(int, int) int); ok {
		r2 = rf(userID, meetingID)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GetMeetingID provides a mock function with given fields: meetingID
func (_m *MeetingData) GetMeetingID(meetingID int) []domain.MeetingOwner {
	ret := _m.Called(meetingID)

	var r0 []domain.MeetingOwner
	if rf, ok := ret.Get(0).(func(int) []domain.MeetingOwner); ok {
		r0 = rf(meetingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MeetingOwner)
		}
	}

	return r0
}

// Insert provides a mock function with given fields: data
func (_m *MeetingData) Insert(data domain.Meeting) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Meeting) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Meeting) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: updatedData, id
func (_m *MeetingData) Update(updatedData domain.Meeting, id int) (int, error) {
	ret := _m.Called(updatedData, id)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Meeting, int) int); ok {
		r0 = rf(updatedData, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Meeting, int) error); ok {
		r1 = rf(updatedData, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMeetingData interface {
	mock.TestingT
	Cleanup(func())
}

// NewMeetingData creates a new instance of MeetingData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMeetingData(t mockConstructorTestingTNewMeetingData) *MeetingData {
	mock := &MeetingData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
