// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "petadopter/domain"

	mock "github.com/stretchr/testify/mock"
)

// AdoptionData is an autogenerated mock type for the AdoptionData type
type AdoptionData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: IDAdoption
func (_m *AdoptionData) Delete(IDAdoption int) bool {
	ret := _m.Called(IDAdoption)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(IDAdoption)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAdoptionID provides a mock function with given fields: AdoptionID
func (_m *AdoptionData) GetAdoptionID(AdoptionID int) []domain.AdoptionPet {
	ret := _m.Called(AdoptionID)

	var r0 []domain.AdoptionPet
	if rf, ok := ret.Get(0).(func(int) []domain.AdoptionPet); ok {
		r0 = rf(AdoptionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.AdoptionPet)
		}
	}

	return r0
}

// GetAdoptionbyuser provides a mock function with given fields: userID
func (_m *AdoptionData) GetAdoptionbyuser(userID int) []domain.AdoptionPet {
	ret := _m.Called(userID)

	var r0 []domain.AdoptionPet
	if rf, ok := ret.Get(0).(func(int) []domain.AdoptionPet); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.AdoptionPet)
		}
	}

	return r0
}

// GetAll provides a mock function with given fields: userID
func (_m *AdoptionData) GetAll(userID int) []domain.AdoptionPet {
	ret := _m.Called(userID)

	var r0 []domain.AdoptionPet
	if rf, ok := ret.Get(0).(func(int) []domain.AdoptionPet); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.AdoptionPet)
		}
	}

	return r0
}

// Insert provides a mock function with given fields: insertAdoption
func (_m *AdoptionData) Insert(insertAdoption domain.Adoption) domain.Adoption {
	ret := _m.Called(insertAdoption)

	var r0 domain.Adoption
	if rf, ok := ret.Get(0).(func(domain.Adoption) domain.Adoption); ok {
		r0 = rf(insertAdoption)
	} else {
		r0 = ret.Get(0).(domain.Adoption)
	}

	return r0
}

// Update provides a mock function with given fields: IDAdoption, updatedAdoption
func (_m *AdoptionData) Update(IDAdoption int, updatedAdoption domain.Adoption) domain.Adoption {
	ret := _m.Called(IDAdoption, updatedAdoption)

	var r0 domain.Adoption
	if rf, ok := ret.Get(0).(func(int, domain.Adoption) domain.Adoption); ok {
		r0 = rf(IDAdoption, updatedAdoption)
	} else {
		r0 = ret.Get(0).(domain.Adoption)
	}

	return r0
}

type mockConstructorTestingTNewAdoptionData interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdoptionData creates a new instance of AdoptionData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdoptionData(t mockConstructorTestingTNewAdoptionData) *AdoptionData {
	mock := &AdoptionData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
